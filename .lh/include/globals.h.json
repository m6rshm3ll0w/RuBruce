{
    "sourceFile": "include/globals.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1742751778621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742751919603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n #include <ArduinoJson.h>\r\n #include \"core/config.h\"\r\n #include \"core/startup_app.h\"\r\n #include \"core/serial_commands/cli.h\"\r\n-#include \"language.h\"\r\n+#include \"core/language.h\"\r\n \r\n #if defined(HAS_RTC)\r\n   #include \"../lib/RTC/cplus_RTC.h\"\r\n   extern cplus_RTC _rtc;\r\n"
                }
            ],
            "date": 1742751778621,
            "name": "Commit-0",
            "content": "#ifndef __GLOBALS__\r\n#define __GLOBALS__\r\n\r\n#include <precompiler_flags.h>\r\n#include <interface.h>\r\n// Globals.h\r\n\r\n#define ALCOLOR TFT_RED\r\n\r\n#include <Arduino.h>\r\n#include <functional>\r\n#include <vector>\r\n#include <SPI.h>\r\n#include <LittleFS.h>\r\n#include <NTPClient.h>\r\n#include <Timezone.h>\r\n#include <ESP32Time.h>\r\n#include <ArduinoJson.h>\r\n#include \"core/config.h\"\r\n#include \"core/startup_app.h\"\r\n#include \"core/serial_commands/cli.h\"\r\n#include \"language.h\"\r\n\r\n#if defined(HAS_RTC)\r\n  #include \"../lib/RTC/cplus_RTC.h\"\r\n  extern cplus_RTC _rtc;\r\n  extern RTC_TimeTypeDef _time;\r\n  extern RTC_DateTypeDef _date;\r\n#endif\r\n\r\n// Declaração dos objetos TFT\r\n#if defined(HAS_SCREEN)\r\n  #include <TFT_eSPI.h>\r\n  extern TFT_eSPI tft;\r\n  extern TFT_eSprite sprite;\r\n  extern TFT_eSprite draw;\r\n#else\r\n    #include <VectorDisplay.h>\r\n    extern SerialDisplayClass tft;\r\n    extern SerialDisplayClass& sprite;\r\n    extern SerialDisplayClass& draw;\r\n#endif\r\n\r\n#ifdef USE_BQ27220_VIA_I2C\r\n  #include <bq27220.h>\r\n  extern BQ27220 bq;\r\n#endif\r\n\r\nextern bool interpreter_start;\r\n\r\nextern BruceConfig bruceConfig;\r\nextern SerialCli serialCli;\r\nextern StartupApp startupApp;\r\n\r\nextern char timeStr[10];\r\nextern SPIClass sdcardSPI;\r\nextern SPIClass CC_NRF_SPI;\r\nextern bool clock_set;\r\nextern time_t localTime;\r\nextern struct tm* timeInfo;\r\nextern ESP32Time rtc;\r\nextern NTPClient timeClient;\r\nextern Timezone myTZ;\r\n\r\nextern int prog_handler;    // 0 - Flash, 1 - LittleFS, 2 - Download\r\n\r\nextern bool sdcardMounted;  // inform if SD Cardis active or not\r\n\r\nextern bool wifiConnected;  // inform if wifi is active or not\r\nextern bool isWebUIActive; // inform if WebUI is active or not\r\n\r\nextern volatile int tftWidth;\r\nextern volatile int tftHeight;\r\n\r\nextern String wifiIP;\r\n\r\nextern bool BLEConnected;  // inform if BLE is active or not\r\n\r\nextern bool gpsConnected; // inform if GPS is active or not\r\n\r\nstruct Option {\r\n  std::string label;\r\n  std::function<void()> operation;\r\n  bool selected = false;\r\n\r\n  Option(const std::string& lbl, const std::function<void()>& op, bool sel = false)\r\n    : label(lbl), operation(op), selected(sel) {}\r\n};\r\n\r\nstruct keyStroke { // DO NOT CHANGE IT!!!!!\r\n    bool pressed=false;\r\n    bool exit_key=false;\r\n    bool fn = false;\r\n    bool del = false;\r\n    bool enter = false;\r\n    bool alt = false;\r\n    bool ctrl = false;\r\n    bool gui = false;\r\n    uint8_t modifiers = 0;\r\n    std::vector<char> word;\r\n    std::vector<uint8_t> hid_keys;\r\n    std::vector<uint8_t> modifier_keys;\r\n\r\n\r\n    // Clear function\r\n    void Clear() {\r\n        pressed = false;\r\n        exit_key = false;\r\n        fn = false;\r\n        del = false;\r\n        enter = false;\r\n        bool alt = false;\r\n        bool ctrl = false;\r\n        bool gui = false;\r\n        modifiers = 0;\r\n        word.clear();\r\n        hid_keys.clear();\r\n        modifier_keys.clear();\r\n    }\r\n};\r\n\r\nstruct TouchPoint {\r\n    bool pressed = false;\r\n    uint16_t x;\r\n    uint16_t y;\r\n\r\n    // clear touch to better handle tasks\r\n    void Clear(void) {\r\n        pressed = false;\r\n        x=0;\r\n        y=0;\r\n    }\r\n};\r\n\r\nextern TouchPoint touchPoint;\r\nextern keyStroke KeyStroke;\r\nextern std::vector<Option> options;\r\n\r\nextern String fileToCopy;\r\n\r\nextern const int bufSize;\r\n\r\nextern bool returnToMenu; // variable to check and break loops to return to main menu\r\n\r\nextern String cachedPassword;\r\n\r\n// Screen sleep control variables\r\nextern unsigned long previousMillis;\r\nextern bool isSleeping;\r\nextern bool isScreenOff;\r\nextern bool dimmer;\r\n\r\nextern volatile bool NextPress;\r\n\r\nextern volatile bool PrevPress;\r\n\r\nextern volatile bool UpPress;\r\n\r\nextern volatile bool DownPress;\r\n\r\nextern volatile bool SelPress;\r\n\r\nextern volatile bool EscPress;\r\n\r\nextern volatile bool AnyKeyPress;\r\n\r\nextern volatile bool NextPagePress;\r\n\r\nextern volatile bool PrevPagePress;\r\n\r\nextern TaskHandle_t xHandle;\r\nextern inline bool check(volatile bool &btn) {\r\n\r\n#ifndef USE_TFT_eSPI_TOUCH\r\n  if(!btn) return false;\r\n  vTaskSuspend( xHandle );\r\n  btn=false;\r\n  AnyKeyPress=false;\r\n  delay(10);\r\n  vTaskResume( xHandle );\r\n  return true;\r\n#else\r\n\r\n  InputHandler();\r\n  if(!btn) return false;\r\n  btn=false;\r\n  AnyKeyPress=false;\r\n  return true;\r\n\r\n#endif\r\n}\r\n\r\n#endif\r\n"
        }
    ]
}